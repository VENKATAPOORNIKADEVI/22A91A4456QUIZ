import javax.swing.*;
import javax.swing.border.BevelBorder;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class QuizApp extends JFrame implements ActionListener {

    private static final long serialVersionUID = 1L;

    private static final int FONT_SIZE = 24;
    private static final Color PRIMARY_COLOR = new Color(0, 123, 255);
    private static final Color SUCCESS_COLOR = new Color(40, 167, 69);
    private static final Color BUTTON_TEXT_COLOR = Color.WHITE;

    private String username;
    private JLabel questionLabel;
    private JLabel usernameLabel;
    private JRadioButton[] optionsButtons;
    private ButtonGroup optionsGroup;
    private JButton nextButton;
    private JButton submitButton;
    private int currentQuestion = 0;
    private int score = 0;
    private int questionsToShow;
    private List<Question> questionsList;
    private int correctAnswers = 0;
    private int wrongAnswers = 0;

    public QuizApp(String username, int questionsToShow) {
        this.username = username;
        this.questionsToShow = questionsToShow;
        questionsList = fetchQuestionsFromDB();
        initializeUI();
        displayQuestion();
    }

    private void initializeUI() {
        setTitle("Quiz Application");
        setSize(700, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        Font questionFont = new Font("Arial", Font.PLAIN, FONT_SIZE);
        Font usernameFont = new Font("Arial", Font.BOLD, FONT_SIZE);

        JPanel topPanel = new JPanel(new GridLayout(2, 1));
        usernameLabel = new JLabel("Username: " + username);
        usernameLabel.setFont(usernameFont);
        usernameLabel.setHorizontalAlignment(SwingConstants.CENTER);
        usernameLabel.setBorder(new CompoundBorder(new BevelBorder(BevelBorder.RAISED), new EmptyBorder(10, 10, 10, 10)));
        topPanel.add(usernameLabel);

        questionLabel = new JLabel();
        questionLabel.setFont(questionFont);
        questionLabel.setHorizontalAlignment(SwingConstants.CENTER);
        questionLabel.setBorder(new CompoundBorder(new BevelBorder(BevelBorder.LOWERED), new EmptyBorder(10, 20, 10, 20)));
        topPanel.add(questionLabel);

        add(topPanel, BorderLayout.NORTH);

        JPanel optionsPanel = new JPanel(new GridLayout(4, 1, 10, 10));
        optionsPanel.setBorder(new CompoundBorder(new BevelBorder(BevelBorder.RAISED), new EmptyBorder(10, 20, 10, 20)));
        optionsButtons = new JRadioButton[4];
        optionsGroup = new ButtonGroup();
        for (int i = 0; i < 4; i++) {
            optionsButtons[i] = new JRadioButton();
            optionsButtons[i].setFont(questionFont);
            optionsButtons[i].setBorder(new CompoundBorder(new BevelBorder(BevelBorder.LOWERED), new EmptyBorder(5, 5, 5, 5)));
            optionsGroup.add(optionsButtons[i]);
            optionsPanel.add(optionsButtons[i]);
        }
        add(optionsPanel, BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 50, 20));
        nextButton = createButton("Next", PRIMARY_COLOR);
        submitButton = createButton("Submit", SUCCESS_COLOR);
        buttonPanel.add(nextButton);
        buttonPanel.add(submitButton);
        add(buttonPanel, BorderLayout.SOUTH);
    }

    private JButton createButton(String text, Color bgColor) {
        JButton button = new JButton(text);
        button.setFont(new Font("Arial", Font.PLAIN, FONT_SIZE));
        button.setBackground(bgColor);
        button.setForeground(BUTTON_TEXT_COLOR);
        button.setBorder(new CompoundBorder(new BevelBorder(BevelBorder.RAISED), new EmptyBorder(5, 15, 5, 15)));
        button.addActionListener(this);
        return button;
    }

    private void displayQuestion() {
        if (currentQuestion < questionsList.size() && currentQuestion < questionsToShow) {
            Question question = questionsList.get(currentQuestion);
            questionLabel.setText("Question " + (currentQuestion + 1) + ": " + question.questionText);
            for (int i = 0; i < 4; i++) {
                optionsButtons[i].setText(question.options[i]);
                optionsButtons[i].setSelected(false); 
                optionsButtons[i].setBackground(Color.WHITE); 
            }
            optionsGroup.clearSelection(); 
        } else {
            endQuiz();
        }
    }

    private void endQuiz() {
        questionLabel.setText("<html>Quiz Completed! " + username + ", your score: " + score + "<br>" + 
                              "<div style='text-align:center;'>Correct answers: " + correctAnswers + "<br>Wrong answers: " + wrongAnswers + "</div></html>");

        for (JRadioButton btn : optionsButtons) {
            btn.setVisible(false);
        }
        nextButton.setVisible(false);
        submitButton.setVisible(false);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == nextButton || e.getSource() == submitButton) {
            char selectedAnswer = getSelectedAnswer();
            if (selectedAnswer == questionsList.get(currentQuestion).answer) {
                score++;
                correctAnswers++;
            } else {
                wrongAnswers++;
            }

            if (e.getSource() == nextButton) {
                currentQuestion++;
                displayQuestion();
            } else if (e.getSource() == submitButton) {
                endQuiz();
            }
        }
    }

    private char getSelectedAnswer() {
        for (int i = 0; i < optionsButtons.length; i++) {
            if (optionsButtons[i].isSelected()) {
                return (char) ('A' + i);
            }
        }
        return 'E';
    }

    private List<Question> fetchQuestionsFromDB() {
        List<Question> questionsList = new ArrayList<>();
        String dbUrl = "jdbc:mysql://localhost:3306/quizdb";
        String dbUser = "root";
        String dbPassword = "AKINROOP26@POORNIKA";

        try (Connection conn = DriverManager.getConnection(dbUrl, dbUser, dbPassword);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM quiz_questions")) {

            while (rs.next()) {
                String questionText = rs.getString("question");
                String[] options = new String[4];
                options[0] = rs.getString("option1");
                options[1] = rs.getString("option2");
                options[2] = rs.getString("option3");
                options[3] = rs.getString("option4");
                char answer = rs.getString("answer").charAt(0);

                questionsList.add(new Question(questionText, options, answer));
            }

            Collections.shuffle(questionsList);

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return questionsList;
    }

    private static class Question {
        String questionText;
        String[] options;
        char answer;

        Question(String questionText, String[] options, char answer) {
            this.questionText = questionText;
            this.options = options;
            this.answer = answer;
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JPanel panel = new JPanel(new BorderLayout(5, 5));
            JLabel label = new JLabel("Enter your username:");
            label.setFont(new Font("Arial", Font.PLAIN, 24));
            JTextField textField = new JTextField(15);
            textField.setFont(new Font("Arial", Font.PLAIN, 24));

            JLabel questionCountLabel = new JLabel("Select number of questions:");
            String[] questionCounts = {"10", "20", "30"};
            JComboBox<String> questionCountComboBox = new JComboBox<>(questionCounts);
            questionCountComboBox.setFont(new Font("Arial", Font.PLAIN, 24));

            panel.add(label, BorderLayout.NORTH);
            panel.add(textField, BorderLayout.CENTER);
            panel.add(questionCountLabel, BorderLayout.SOUTH);
            panel.add(questionCountComboBox, BorderLayout.AFTER_LAST_LINE);
            panel.setPreferredSize(new Dimension(200, 150));

            int result = JOptionPane.showConfirmDialog(null, panel, "Quiz Setup", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
            if (result == JOptionPane.OK_OPTION && !textField.getText().trim().isEmpty()) {
                String username = textField.getText().trim();
                int questionsToShow = Integer.parseInt((String) questionCountComboBox.getSelectedItem());
                new QuizApp(username, questionsToShow).setVisible(true);
            } else {
                JOptionPane.showMessageDialog(null, "Username cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            }
        });
    }
}
